import "unknwn.idl";
import "oaidl.idl";
import "ocidl.idl";
import "objidl.idl";
import "strmif.idl";

[uuid("5406193C-E3EC-4E5A-95D3-29EC1EAEA033")]
[helpstring("Flags whitch entries should be logged")]
typedef enum StatisticCaptureFlags
{
    SCF_None = 0,

    SCF_MediaSample     = 0x0001,
    SCF_DataCrc         = 0x0002,   // Generate CRC for MediaSample Data or SRK_IS_Read/SRK_IS_Write
    SCF_Streaming       = 0x0004,   // Start/Stop Streaming

    SCF_IAsyncReader    = 0x0008,   // SRK_AR_xxx
    SCF_IStream         = 0x0010,   // SRK_IS_xxx
    SCF_IMediaSeeking   = 0x0020,   // SRK_MS_xxx
    SCF_IMediaPosition  = 0x0040,   // SRK_MP_xxx
    SCF_IBaseFilter     = 0x0080,   // SRK_BF_xxx
    SCF_IPin            = 0x0100,   // SRK_IP_xxx
    SCF_IMemInputPin    = 0x0200,   // SRK_IMP_xxx
    SCF_IQualityControl = 0x0400,   // SRK_QC_xxx

    SCF_All             = -1
} StatisticCaptureFlags;

[uuid("EFA80B5A-913E-4806-B7BC-3202234FDE70")]
typedef enum StatisticRecordKind
{
	// Core filter events
    SRK_Empty = 0,    // Empty Record
    SRK_MediaSample = SCF_MediaSample,
    SRK_StartStreaming = SCF_Streaming,
    SRK_StopStreaming,

    // IAsyncReader Entries
    SRK_AR_Length = SCF_IAsyncReader,
    SRK_AR_Request,
    SRK_AR_SyncRead,
    SRK_AR_WaitNext,

    // IStream Entries
    SRK_IS_Read = SCF_IStream,
    SRK_IS_Write,
    SRK_IS_Seek,
    SRK_IS_Commit,
    SRK_IS_SetSize,

    // IMediaSeeking Entries
    SRK_MS_SetPositions = SCF_IMediaSeeking,
    SRK_MS_SetRate,
    SRK_MS_SetTimeFormat,

    // IMediaPosition Entries
    SRK_MP_SetCurrentPosition = SCF_IMediaPosition,
    SRK_MP_SetStopTime,
    SRK_MP_SetPrerollTime,
    SRK_MP_SetRate,

	// IBaseFilter entries (some inherited from IMediaFilter)
    SRK_BF_JoinFilterGraph = SCF_IBaseFilter,
    SRK_BF_Pause,
    SRK_BF_Run,
    SRK_BF_SetSyncSource,
    SRK_BF_Stop,

	// IPin entries
    SRK_IP_BeginFlush = SCF_IPin,
    SRK_IP_Connect,
    SRK_IP_Disconnect,
    SRK_IP_EndFlush,
    SRK_IP_EndOfStream,
    SRK_IP_NewSegment,
    SRK_IP_ReceiveConnection,

	// IMemInputpin entries
	SRK_MIP_NotifyAllocator = SCF_IMemInputPin,

	// IQualityControl entries
    SRK_QC_Notify = SCF_IQualityControl,
    SRK_QC_SetSink
} StatisticRecordKind;

[uuid("66AA0068-8140-49BB-8125-FEC5AA2FE9F4")]
typedef struct StatisticRecordEntry
{ 
    // Entry
    __int64 EntryNr;
    StatisticRecordKind EntryKind;

    [helpstring("TimeStamp when this entry was created")]
    __int64 EntryTimeStamp;

    // IMediaSample
    VARIANT_BOOL IsDiscontinuity;
    VARIANT_BOOL IsPreroll;
    VARIANT_BOOL IsSyncPoint;
    VARIANT_BOOL IsMediaTypeChange;

    [helpstring("IMediaSample::GetActualDataLength")]
    long ActualDataLength;

    [helpstring("IMediaSample::GetSize")]
    long BufferSize;

    [helpstring("IMediaSample::GetTime; if < 0 => HRESULT")]
    __int64 StreamTimeStart;
    [helpstring("IMediaSample::GetTime; if < 0 => HRESULT")]
    __int64 StreamTimeStop;

    [helpstring("IMediaSample::GetMediaTime; if < 0 => HRESULT")]
    __int64 MediaTimeStart;
    [helpstring("IMediaSample::GetMediaTime; if < 0 => HRESULT")]
    __int64 MediaTimeStop;

    // IMediaSample2
    [helpstring("Indicates if the sample had the IMediaSample2")]
    VARIANT_BOOL HadIMediaSample2;

    [helpstring("only when IMediaSample2")]
    unsigned long TypeSpecificFlags;

    [helpstring("only when IMediaSample2")]
    unsigned long SampleFlags;

    [helpstring("only when IMediaSample2")]
    unsigned long StreamId;

    // First bytes of the sample
    [helpstring("Count of Data taken from the MediaSample")]
    int nDataCount;

    [unique, size_is(nDataCount), helpstring("First bytes of the Media Sample")]
    byte *aData;

    [helpstring("CRC32 value of the MediaSample Data")]
    DWORD crcData;
} StatisticRecordEntry;

[object, uuid("780E9A9E-0CC8-4EE7-9788-3637D8495C51")]
interface IAnalyzerCallback : IUnknown
{
    [id(1), helpstring("Called after a new entry was added to the statistic")]
    HRESULT OnNewEntry(unsigned long entryNr);

    [id(2), helpstring("Called after the statistic was resetted")]
    HRESULT OnResetted();
}

[object, uuid("A0962235-1FD7-4BFD-B212-C3176A3106A1")]
interface IAnalyzerBase : IUnknown
{
    [propget, id(1), helpstring("Is the analyzer enabled")] HRESULT Enabled([out, retval] VARIANT_BOOL* pVal);
    [propput, id(1), helpstring("Is the analyzer enabled")] HRESULT Enabled([in] VARIANT_BOOL newVal);

    [propget, id(2), helpstring("Flags which entries should be captured (see StatisticCaptureFlags)")] HRESULT CaptureConfiguration([out, retval] int* pVal);
    [propput, id(2), helpstring("Flags which entries should be captured (see StatisticCaptureFlags)")] HRESULT CaptureConfiguration([in] int newVal);

    [id(3), helpstring("Reset Statistic")] HRESULT ResetStatistic();
    [propget, id(4), helpstring("Count of statistic entries")] HRESULT EntryCount([out, retval] __int64 *pVal);

    [id(5), helpstring("Register or remove a callback for the events of the statistic")]
    HRESULT SetCallback(IAnalyzerCallback* pCallback);
};

[object, uuid("51039F7F-907D-4E3F-B16F-721BC7317094")]
interface IAnalyzerCommon : IAnalyzerBase
{
    [propget, id(6), helpstring("Bytes to Capture for a Sample")] HRESULT PreviewSampleByteCount([out, retval] unsigned short* pVal);
    [propput, id(6), helpstring("Bytes to Capture for a Sample")] HRESULT PreviewSampleByteCount([in] unsigned short newVal);
    
    [id(7), helpstring("Get an entry from the statistic (if aData != NULL you need to CoTaskMemFree it)")]
    HRESULT GetEntry([in] __int64 nr, [out, retval] StatisticRecordEntry *pVal);
};





[uuid("9E7E6440-2BC6-413E-8373-007C0CE47AA9")]
[helpstring("Flags whitch entries should be logged")]
typedef enum H264CaptureFlags
{
    HCF_None = 0,

    HCF_SEI             = 0x0100,
    HCF_SliceInfo       = 0x0200,

    HCF_All             = -1
} H264CaptureFlags;

[uuid("9375F567-56A7-4AA7-8568-A788655BAF15")]
typedef enum H264RecordKind
{
	// Core filter events
    HRK_Empty = 0,    // Empty Record

    HRK_SPS, // aData = NULL
    HRK_PPS, // aData = NULL

    // SEI Entries
    HRK_SEI_BUFFERING_PERIOD                     = HCF_SEI + 0,
    HRK_SEI_PIC_TIMING                           = HCF_SEI + 1,
    HRK_SEI_PAN_SCAN_RECT                        = HCF_SEI + 2,
    HRK_SEI_FILLER_PAYLOAD                       = HCF_SEI + 3,
    HRK_SEI_USER_DATA_REGISTERED_ITU_T_T35       = HCF_SEI + 4,
    HRK_SEI_USER_DATA_UNREGISTERED               = HCF_SEI + 5,
    HRK_SEI_RECOVERY_POINT                       = HCF_SEI + 6,
    HRK_SEI_DEC_REF_PIC_MARKING_REPETITION       = HCF_SEI + 7,
    HRK_SEI_SPARE_PIC                            = HCF_SEI + 8,
    HRK_SEI_SCENE_INFO                           = HCF_SEI + 9,
    HRK_SEI_SUB_SEQ_INFO                         = HCF_SEI + 10,
    HRK_SEI_SUB_SEQ_LAYER_CHARACTERISTICS        = HCF_SEI + 11,
    HRK_SEI_SUB_SEQ_CHARACTERISTICS              = HCF_SEI + 12,
    HRK_SEI_FULL_FRAME_FREEZE                    = HCF_SEI + 13,
    HRK_SEI_FULL_FRAME_FREEZE_RELEASE            = HCF_SEI + 14,
    HRK_SEI_FULL_FRAME_SNAPSHOT                  = HCF_SEI + 15,
    HRK_SEI_PROGRESSIVE_REFINEMENT_SEGMENT_START = HCF_SEI + 16,
    HRK_SEI_PROGRESSIVE_REFINEMENT_SEGMENT_END   = HCF_SEI + 17,
    HRK_SEI_MOTION_CONSTRAINED_SLICE_GROUP_SET   = HCF_SEI + 18,
    HRK_SEI_FILM_GRAIN_CHARACTERISTICS           = HCF_SEI + 19,
    HRK_SEI_DEBLOCKING_FILTER_DISPLAY_PREFERENCE = HCF_SEI + 20,
    HRK_SEI_STEREO_VIDEO_INFO                    = HCF_SEI + 21,

    // SliceInfo Entries
    HRK_Slice = HCF_SliceInfo,  // aData = SliceInfo
} H264RecordKind;

[uuid("390048FB-BD1F-45E5-8AB7-A931A376F66B")]
typedef struct H264RecordEntry
{ 
    // Entry
    __int64 EntryNr;
    H264RecordKind EntryKind;

    [helpstring("IMediaSample::GetTime")]
    __int64 StreamTimeStart;

    // First bytes of the sample
    [helpstring("Count of Data")]
    int nDataCount;

    [unique, size_is(nDataCount), helpstring("Date for the entry kind")]
    byte *aData;
} H264RecordEntry;

[object, uuid("3D33E3C4-AF23-4DED-9C53-6FC5FC43139B")]
interface IAnalyzerH264 : IAnalyzerBase
{   
    [id(7), helpstring("Get an entry (if aData != NULL you need to CoTaskMemFree it)")]
    HRESULT GetEntry([in] __int64 nr, [out, retval] H264RecordEntry *pVal);
};







[object, uuid("88512FA3-2AD2-4E5C-A266-E9AB6E8B1AA7")]
interface IAnalyzerVideo : IAnalyzerBase
{
    // TODO
};

[object, uuid("77363364-8A9F-45EF-A524-D02C49B3FE38")]
interface IAnalyzerAudio : IUnknown
{
    // TODO
};




[
	uuid("CA6B3460-28B3-4A6E-A7FC-A83CF1DEEC48"), 
    helpstring("Analyzer Filter Type Library"),
	//lcid(0x0409), // EN-US
    version(1.0)
] 
library AnalyzerFilterLib
{
    enum StatisticCaptureFlags;
    enum StatisticRecordKind;
    struct StatisticRecordEntry;

    enum H264CaptureFlags;
    enum H264RecordKind;
    struct H264RecordEntry;

    interface IAnalyzerCallback;
    interface IAnalyzerBase;
    interface IAnalyzerCommon;
    interface IAnalyzerH264;
    interface IAnalyzerAudio;
    interface IAnalyzerVideo;

    [uuid("CA6B3460-28B3-4A6E-A7FC-A83CF1DEEC49")]
    coclass AnalyzerFilter
    {
        [default] interface IBaseFilter;
        interface ISpecifyPropertyPages;
        interface IAnalyzerCommon;
    }

    [uuid("CA6B3460-28B3-4A6E-A7FC-A83CF1DEEC4A")]
    coclass AnalyzerWriterFilter
    {
        [default] interface IBaseFilter;
        interface IFileSinkFilter2;
        interface IAMFilterMiscFlags;
        interface IMediaSeeking;
        interface ISpecifyPropertyPages;
        interface IAnalyzerCommon;
    }

    [uuid("19E56670-B62F-4658-BC54-086E798EF97B")]
    coclass AnalyzerPropPageConfig
    {
        [default] interface IPropertyPage;
    }

    [uuid("A18BD3EC-6CD4-472C-A1F9-A61AA6FA1D31")]
    coclass AnalyzerPropPageLog
    {
        [default] interface IPropertyPage;
    }

    [uuid("ECB55F7F-F75C-4424-BA82-DA0DD8B290D9")]
    coclass H264AnalyzerFilter
    {
        [default] interface IBaseFilter;
        interface IAnalyzerH264;
    }

    [uuid("BF41C054-221E-4596-99AC-5AD555FD9548")]
    coclass VideoAnalyzerFilter
    {
        interface IBaseFilter;
        [default] interface IAnalyzerVideo;
    }

    [uuid("F896EF1A-3FE4-4D22-9B61-1288240FD39F")]
    coclass AudioAnalyzerFilter
    {
        interface IBaseFilter;
        [default] interface IAnalyzerAudio;
    }
};
